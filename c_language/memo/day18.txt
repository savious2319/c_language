day18

구조체 : 내가 만들어쓰는 "자료형"
[
	멤버변수
	. (점 연산자 - 최우선 연산자)

	구조체변수 .멤버변수
]
1. 구조체 포인터

	구조체 선언

	void main(){
		구조체 정의;
		Data data1; data1 안에는 여러개의 멤버변수가 존재한다.
		data1.멤버변수 = 10; 값을 대입
		
		&data1  <---- 구조체 변수의 주소가 구해진다!
		&data1.num <---- (연산자 우선순위 때문에) data1의 멤버를 읽은 후, 그 멤버의 주소를 구한다.

		Data *pData; *는 구조체타입 Data만큼 읽는 포인터변수 pData를 선언한거다!

		pData = &data1;

		(*pData).num = 10;		data1 == (*pData)
					data1.num == (*pData).num

		pData->num = 10;		(*주소). 을 주소-> 화살표로 치환 할 수 있다!

		fct(&구조체변수);

		void fct(Data *pData){

			p->멤버변수 = 값
			scanf("%d", &p->멤버변수); //값입력도 가능하다.  
					         //->가 최우선 연산자이기때문에 멤버변수에 접근해서
					         // 그 멤버변수의 주소에 데이터를 입력하라는 뜻

			scanf("%s", p->멤버변수); **멤버변수는 아마 배열일 것이다!
					          &를 배열앞에 붙이지 말자!
	}


2. 구조체 배열


	Data data1, data2, data3.... data100;

	Data arData[100];
	arData는 배열이다! 포인터 상수다!

	arData.num  <--- 문제발생!!! 주소를 변수로 만들어줘야 한다!

	그래서, *(arData+0).num   ----> arData[0].num

	fct( 배열의 크키(칸수), 배열의 위치);  //배열을 일괄처리 할 수 있다!

	fct(100, arData);

	-> void fct(int num, Data *pData){

	}

3. 헤더파일에 구조체 넣고 관리하기!

	MyHeader.h

		헤더파일 #include <stdio.h> ....

		구조체 선언
		tyepdef struct MyType { int n; double d; char ch; } Type;
		
		void fct(MyType *p);

		void fct2(int, MyType num);	


		Sinsang frd;
		Sinsang *pFrd;

		pFrd = &frd;
		//name[20]  멤버변수


		pFrd.name = "KIM"  // 화살표 연산자 --> 이용해서 수정!
		strcpy(pFrd->name, "KIM");  //name은 배열이기때문에 포인터 상수다. 그래서 대입이 안돼서 복사해야한다 
		

=============================================================================================
4. 구조체 동적배열
		stdlib.h (malloc.h)
	동적배열 malloc()	free()	sizeof(타입)	포인터변수	heap
	
	int num;
	int size;

	int *p = (int *)malloc(size * sizeof(int));


	Profile profile;
	int size; //몇개 만들거니?
	Profile *pProfile;

	pProfile = (Profile *)malloc(size * sizeof(Profile));

	free(pProfile);



5. 중첩 구조체

	: 구조체 멤버변수가 다른 구조체타입의 멤버를 갖고 있는 형태!
	(구조체 안에 구조체 멤버변수 있다!!!)

	struct TypeA{
		int mA;
		int mB;

	};

	struct TypeB{
		int mC;
		int mD;

	};

	struct Type{
		TypeA memberA;
		TypeB memberB;

	};


	void main(){

		Type type;

	}

























